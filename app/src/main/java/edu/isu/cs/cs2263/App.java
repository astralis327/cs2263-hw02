/*
 * This Java source file was generated by the Gradle 'init' task.
 *
 * Copyright 2021 Emily R. Elzinga
 * Created 09-28-21
 *
 */

package edu.isu.cs.cs2263;

import javafx.application.Application;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Main app class for the program
 *
 * @author Emily Elzinga
 * @version 2.1.0
 */
public class App extends Application {
    private static App INSTANCE;


    /**
     * Constructor that forces singleton
     */
    public App(){
        super();
        synchronized(App.class){
            if(INSTANCE != null) throw new UnsupportedOperationException(
                    getClass()+" is singleton but constructor called more than once");
            INSTANCE = this;
        }
    }

    /**
     * Make the 'Add Students to List' Button. Every time it is clicked it adds the students
     * to the left hand list view element
     * @param students List of Student objects
     * @param studentList ListView element for student names
     * @return button
     */
    public Button makeButton(List<Student> students, ListView<String> studentList){
        Button button = new Button("Get Students");

        button.setMinWidth(100.0);
        button.setOnAction(
                event -> {
                    for (Student student : students){
                        studentList.getItems().add(student.getFirstName() + " " + student.getLastName());
                    }
                });

        return button;
    }


    /**
     * Adds student's courses to the right hand list view every time a student's name is clicked
     * @param studentList ListView element for student names
     * @param courseList ListView element for course names
     * @param students List of Student objects
     * @return courseList
     */
    public ListView<String> fillCourseList(ListView<String> studentList, ListView<String> courseList, List<Student> students){
        studentList.setOnMouseClicked(event -> {
                    courseList.getItems().clear();
                    ObservableList<Integer> selectedIndices =
                            studentList.getSelectionModel().getSelectedIndices();
                    Student selectedStudent = students.get(selectedIndices.get(0));
                    for (Course course : selectedStudent.getStudentCourses()) {
                        courseList.getItems().add(
                                course.getSubject() + " " +
                                        course.getNumber() + " " +
                                        course.getTitle()
                        );
                    }
                }
        );
        return courseList;
    }

    /**
     * Master method for User interface
     * @param stage javafx Stage object
     */
    public void start(Stage stage) {
        ListView<String> studentListView = new ListView<>();
        ListView<String> courseListView = new ListView<>();
        List<Student> stemStudents = new IOManager().readData("studentsData.txt");

        Text text = new Text(10,50, "Is taking");
        Button fillList = makeButton(stemStudents, studentListView);
        courseListView = fillCourseList(studentListView, courseListView, stemStudents);

        HBox hbox = new HBox(8);
        hbox.getChildren().addAll(studentListView,text,courseListView);

        studentListView.setMaxHeight(200.0);
        studentListView.setMinWidth(120.0);
        studentListView.setMaxWidth(120.0);
        courseListView.setMaxHeight(200.0);
        courseListView.setMinWidth(250.0);

        HBox hbox2 = new HBox(8);
        hbox2.getChildren().add(fillList);
        BorderPane borderPane = new BorderPane();
        BorderPane.setMargin(hbox, new Insets(10));
        BorderPane.setMargin(hbox2, new Insets(10));
        borderPane.setTop(hbox);
        borderPane.setRight(hbox2);

        Scene scene = new Scene(borderPane, 460, 270);
        stage.setScene(scene);
        stage.setTitle("Course View");
        stage.show();
    }


    /**
     * Main method for the program
     * @param args
     */

    public static void main(String[] args) throws IOException {
        /*
        IOManager inputOutput = new IOManager();
        List<Student> stemStudents = new ArrayList<>();

        Course engPhysLecture = new Course(2211, "Physics", "Engineering Physics 1");
        Course engPhysLab = new Course(2214, "Physics", "Engineering Physics 1 Lab");
        Course diffEq = new Course(3360, "Math", "Differential Equations");


        List<Course> studentCourses = new ArrayList<>();
        studentCourses.add(engPhysLecture);
        studentCourses.add(engPhysLab);
        studentCourses.add(diffEq);

        Student student = new Student(studentCourses, "Pippin", "Longbottom");
        Student student1 = new Student(studentCourses, "Merry", "Weasely");
        stemStudents.add(student);
        stemStudents.add(student1);
        inputOutput.writeData("studentsData.txt", stemStudents);
        */

        Application.launch();
    }


}
